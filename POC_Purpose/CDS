import warnings
warnings.simplefilter(action= "ignore")
warnings.filterwarnings("ignore")


# Import the packages
import numpy as np
import pandas as pd
import cv2
import os
import matplotlib.pyplot as plt


# Algorithms
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score,classification_report
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import PCA


# Load Dataset
symptoms_df= pd.read_csv("/MediPredict_AI_Health_Analyzer/Symptom2Disease.csv")

print("Dataframe loaded and opened: \n", symptoms_df.head())

# Convert symptoms columns to lower case adn replaces spaces with underscores
symptoms_df.columns= [col.lower().replace(" ","_" ) for col in symptoms_df.columns]

# Encode disease names into numerical values
labelencoder = LabelEncoder()
symptoms_df['disease'] = labelencoder.fit_transform(symptoms_df["disease"])

# Separate features(symptoms) and target( disease)
# Convert symptoms text into TF-IDF features
vectorizer = TfidfVectorizer(max_features=500)  # Limit features to avoid overfitting
X = vectorizer.fit_transform(symptoms_df["symptoms"]).toarray()

#X= symptoms_df.drop(columns=["disease"])
Y= symptoms_df["disease"]

# Split data into training and testing sets
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Check the shape of train and test sets
print(f"Training set: {X_train.shape}, test set: {X_test.shape}")


# Initialize a Random Forest Classifier
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
model.fit(X_train, Y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(Y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

# Print detailed classification report
print(classification_report(Y_test, y_pred, target_names=labelencoder.classes_))

# Make precictions for a new patient
# New symptom input (modify as needed)
new_symptom = ["My skin is itchy and very irregularly"]

# Convert text into numerical form using TF-IDF
new_symptom_vectorized = vectorizer.transform(new_symptom).toarray()

# Predict disease
predicted_disease = model.predict(new_symptom_vectorized)

# Convert number back to disease name
predicted_disease_name = labelencoder.inverse_transform(predicted_disease)[0]

print(f"Predicted Disease: {predicted_disease_name}")

print('-----------------------------------------')

# Load the Image dataset
image_symptoms_df= "D:/Gajendran/Python Works/LMES/MediPredict_AI_Health_Analyzer/DiseaseImageSet"

# Image size for resizing( small size helps PCA run faster)
IMG_SIZE= (64, 64)
image_data =[]

# Load all images from the folder
for img_name in os.listdir(image_symptoms_df):
    img_path = os.path.join(image_symptoms_df, img_name)
    img= cv2.imread(img_path, cv2.IMREAD_COLOR)  #load the image in color

    if img is not None:
        img = cv2.resize(img, IMG_SIZE)
        img = img.flatten()
        image_data.append(img)

# COnvert to Numpy Array
image_data = np.array(image_data)
print(f"Loaded {len(image_data)} images with shape {image_data.shape}")

# Apply PCA
pca= PCA(n_components=0.95, random_state=42)
image_data_pca= pca.fit_transform(image_data)

# Print new shape after pca
print(f"Original shape: {image_data_pca.shape}")
print(f" Reduced shape: {image_data_pca.shape}")

from sklearn.cluster import KMeans

# Define number of clusters (we assume 3: Chickenpox, Healthy, Other)
num_clusters = 1
kmeans = KMeans(n_clusters=num_clusters, random_state=42)
clusters = kmeans.fit_predict(image_data_pca)

# Plot clustered images
plt.scatter(image_data_pca[:, 0], image_data_pca[:, 1], c=clusters, cmap='viridis')
plt.xlabel("Principal Component 1")
plt.ylabel("Principal Component 2")
plt.title("K-Means Clustering of Chickenpox Images")
plt.show()

# Check images from each cluster
import random

cluster_id = 0  # Change this to view different clusters

# Get images from a specific cluster
cluster_images = np.where(clusters == cluster_id)[0]

# Show some images from the selected cluster
fig, axes = plt.subplots(1, 5, figsize=(15, 5))
for i, img_idx in enumerate(random.sample(list(cluster_images), 5)):
    img = image_data[img_idx].reshape(IMG_SIZE[0], IMG_SIZE[1], 3)
    axes[i].imshow(img.astype(np.uint8))
    axes[i].axis("off")

plt.show()

